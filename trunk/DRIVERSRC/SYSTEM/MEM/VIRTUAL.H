/*
./DRIVERSRC/SYSTEM/MEM/VIRTUAL.H
*/


#ifndef				VIRTUAL_H_INCLUDED
	#define				VIRTUAL_H_INCLUDED
	
	#include <FORMATTING.H>
	#include "PHYSICAL.H"
	
	#define PAGES_PER_TABLE 1024
	#define TABLES_PER_DIR 1024
	#define PAGE_SIZE 4096
	
	typedef uint32_t vaddr;
	typedef uint32_t paddr;
	
	enum PAGE_PTE_FLAGS {
		I86_PTE_PRESENT			=	1,			//0000000000000000000000000000001
		I86_PTE_WRITABLE		=	2,			//0000000000000000000000000000010
		I86_PTE_USER			=	4,			//0000000000000000000000000000100
		I86_PTE_WRITETHOUGH		=	8,			//0000000000000000000000000001000
		I86_PTE_NOT_CACHEABLE	=	0x10,		//0000000000000000000000000010000
		I86_PTE_ACCESSED		=	0x20,		//0000000000000000000000000100000
		I86_PTE_DIRTY			=	0x40,		//0000000000000000000000001000000
		I86_PTE_PAT				=	0x80,		//0000000000000000000000010000000
		I86_PTE_CPU_GLOBAL		=	0x100,		//0000000000000000000000100000000
		I86_PTE_LV4_GLOBAL		=	0x200,		//0000000000000000000001000000000
		I86_PTE_FRAME			=	0x7FFFF000 	//1111111111111111111000000000000
	};	
	enum PAGE_PDE_FLAGS {
		I86_PDE_PRESENT			=	1,			//0000000000000000000000000000001
		I86_PDE_WRITABLE		=	2,			//0000000000000000000000000000010
		I86_PDE_USER			=	4,			//0000000000000000000000000000100
		I86_PDE_PWT				=	8,			//0000000000000000000000000001000
		I86_PDE_PCD				=	0x10,		//0000000000000000000000000010000
		I86_PDE_ACCESSED		=	0x20,		//0000000000000000000000000100000
		I86_PDE_DIRTY			=	0x40,		//0000000000000000000000001000000
		I86_PDE_4MB				=	0x80,		//0000000000000000000000010000000
		I86_PDE_CPU_GLOBAL		=	0x100,		//0000000000000000000000100000000
		I86_PDE_LV4_GLOBAL		=	0x200,		//0000000000000000000001000000000
		I86_PDE_FRAME			=	0x7FFFF000 	//1111111111111111111000000000000
	};
	
	typedef uint32_t Page_Entry;
	typedef struct Page_Table {
		Page_Entry page[PAGES_PER_TABLE];
	} ptbl_t, *ptbl_p;
	typedef struct Page_Directory {
		ptbl_p table[TABLES_PER_DIR];
	} pdir_t, *pdir_p;
		
	Page_Entry Create_Page(paddr physical, bool user, bool write);
	void Add_Table_To_Dir(uint32_t index, ptbl_p table, pdir_p dir, bool user, bool write);
	pdir_t *Kernel_Page_Dir_Address(void);
	void _VMem_init(void);
	pdir_p Create_Process_Directory(uint32_t process_size_bytes, uint32_t *physical_location);
	
#endif